// <auto-generated />
using System;
using LMS__Elibrary_BE.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LMS__Elibrary_BE.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240224120341_Migration_V1.0")]
    partial class Migration_V10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LMS_Library_API.Models.AboutStudent.ClassSubject", b =>
                {
                    b.Property<string>("classId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("subjectId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("classId", "subjectId");

                    b.HasIndex("subjectId");

                    b.ToTable("ClassSubject", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutStudent.StudentQnALikes", b =>
                {
                    b.Property<Guid>("studentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswersLikedID")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("QuestionsLikedID")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.HasKey("studentId");

                    b.ToTable("StudentQnALikes", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutStudent.StudentSubject", b =>
                {
                    b.Property<Guid>("studentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("subjectId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("subjectMark")
                        .HasColumnType("bit");

                    b.HasKey("studentId", "subjectId");

                    b.HasIndex("subjectId");

                    b.ToTable("StudentSubject", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutStudent.StudyHistory", b =>
                {
                    b.Property<Guid>("studentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("documentId")
                        .HasColumnType("int");

                    b.Property<int>("watchMinutes")
                        .HasColumnType("int");

                    b.HasKey("studentId", "documentId");

                    b.HasIndex("documentId");

                    b.ToTable("StudyHistory", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutStudent.StudyTime", b =>
                {
                    b.Property<Guid>("studentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("subjectId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("studyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("totalTime")
                        .HasColumnType("int");

                    b.HasKey("studentId", "subjectId");

                    b.HasIndex("subjectId");

                    b.ToTable("StudyTime", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.CustomInfoOfSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("subjectId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("subjectId");

                    b.ToTable("CustomInfoOfSubject", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Type")
                        .HasColumnType("bit");

                    b.Property<Guid?>("censorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("lessonId")
                        .HasColumnType("int");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<DateTime>("submissionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("teacherCreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("censorId");

                    b.HasIndex("lessonId");

                    b.HasIndex("teacherCreatedId");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.DocumentAccess", b =>
                {
                    b.Property<int>("documentId")
                        .HasColumnType("int");

                    b.Property<string>("classId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("isForAllClasses")
                        .HasColumnType("bit");

                    b.HasKey("documentId");

                    b.HasIndex("classId");

                    b.ToTable("DocumentAccess", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("censorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("dateSubmited")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isHidden")
                        .HasColumnType("bit");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("numericalOrder")
                        .HasColumnType("int");

                    b.Property<int>("partId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<Guid>("teacherCreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("censorId");

                    b.HasIndex("partId");

                    b.HasIndex("teacherCreatedId");

                    b.ToTable("Lesson", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.LessonAccess", b =>
                {
                    b.Property<int>("lessonId")
                        .HasColumnType("int");

                    b.Property<string>("classId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("isForAllClasses")
                        .HasColumnType("bit");

                    b.HasKey("lessonId");

                    b.HasIndex("classId");

                    b.ToTable("LessonAccess", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.LessonAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isTeacher")
                        .HasColumnType("bit");

                    b.Property<int>("lessonQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("likesCounter")
                        .HasColumnType("int");

                    b.Property<Guid>("studentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("teacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("lessonQuestionId");

                    b.HasIndex("studentId");

                    b.HasIndex("teacherId");

                    b.ToTable("LessonAnswer", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.LessonQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isTeacher")
                        .HasColumnType("bit");

                    b.Property<int>("lessonId")
                        .HasColumnType("int");

                    b.Property<int>("likesCounter")
                        .HasColumnType("int");

                    b.Property<Guid>("studentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("teacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("lessonId");

                    b.HasIndex("studentId");

                    b.HasIndex("teacherId");

                    b.ToTable("LessonQuestion", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.NotificationClassStudent", b =>
                {
                    b.Property<int>("subjectNotificationId")
                        .HasColumnType("int");

                    b.Property<string>("classId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("studentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isForAllStudent")
                        .HasColumnType("bit");

                    b.HasKey("subjectNotificationId", "classId", "studentId");

                    b.HasIndex("classId");

                    b.HasIndex("studentId");

                    b.ToTable("NotificationClassStudent", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("censorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("dateSubmited")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isHidden")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("numericalOrder")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("subjectId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("teacherCreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("censorId");

                    b.HasIndex("subjectId");

                    b.HasIndex("teacherCreatedId");

                    b.ToTable("Part", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.SubjectNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("subjectId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("teacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("subjectId");

                    b.HasIndex("teacherId");

                    b.ToTable("SubjectNotification", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.ExamRecentViews", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExamId")
                        .HasColumnType("varchar(30)");

                    b.HasKey("UserId", "ExamId");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamRecentViews", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.Help", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Help", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.PrivateFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsImage")
                        .HasColumnType("bit");

                    b.Property<string>("Modifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateFile", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.QnALikes", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswersLikedID")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("QuestionsLikedID")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("QnALikes", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.TeacherClass", b =>
                {
                    b.Property<string>("classId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("teacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("classId", "teacherId");

                    b.HasIndex("teacherId");

                    b.ToTable("TeacherClass", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("totalStudent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.Exam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("CensorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Format")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("TeacherCreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CensorId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherCreatedId");

                    b.ToTable("Exam", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QB_Answer_Essay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LimitWord")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("SubmitType")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QB_Answer_Essay", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QB_Answer_MC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnswerContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QB_Answer_MC", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.Question_Exam", b =>
                {
                    b.Property<string>("ExamId")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("ExamId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Question_Exam", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QuestionBanks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<bool>("Format")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("TeacherCreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherCreatedId");

                    b.ToTable("QuestionBanks", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Notification.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeCounter")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Notification.NotificationFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("NotificationFeatures", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Notification.NotificationSetting", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FeaturesId")
                        .HasColumnType("int");

                    b.Property<bool>("ReceiveNotification")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "FeaturesId");

                    b.HasIndex("FeaturesId");

                    b.ToTable("NotificationSetting", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.RoleAccess.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.RoleAccess.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.RoleAccess.Role_Permissions", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<bool>("CanAccess")
                        .HasColumnType("bit");

                    b.HasKey("RoleId", "PermissionsId");

                    b.HasIndex("PermissionsId");

                    b.ToTable("Role_Permissions", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Avartar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("classId")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("classId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.StudentNotification.StudentNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeCounter")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("studentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("studentId");

                    b.ToTable("StudentNotification", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.StudentNotification.StudentNotificationFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("featureType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StudentNotificationFeatures", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.StudentNotification.StudentNotificationSetting", b =>
                {
                    b.Property<Guid>("studentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("featuresId")
                        .HasColumnType("int");

                    b.Property<int>("StudentNotificationFeaturesId")
                        .HasColumnType("int");

                    b.Property<bool>("receiveNotification")
                        .HasColumnType("bit");

                    b.HasKey("studentId", "featuresId");

                    b.HasIndex("StudentNotificationFeaturesId");

                    b.ToTable("StudentNotificationSetting", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TeacherId")
                        .IsUnique();

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.SystemInfomation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LMSWebsite")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LibrarySystemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("Principals")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("SchoolLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SchoolWebsite")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Principals")
                        .IsUnique();

                    b.ToTable("SystemInfomation", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Avartar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutStudent.ClassSubject", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Class", "Class")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("classId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Subject", "Subject")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutStudent.StudentQnALikes", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Student", "Student")
                        .WithOne("StudentQnALikes")
                        .HasForeignKey("LMS_Library_API.Models.AboutStudent.StudentQnALikes", "studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutStudent.StudentSubject", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Student", "Student")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutStudent.StudyHistory", b =>
                {
                    b.HasOne("LMS_Library_API.Models.AboutSubject.Document", "Document")
                        .WithMany("StudyHistories")
                        .HasForeignKey("documentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Student", "Student")
                        .WithMany("StudyHistories")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutStudent.StudyTime", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Student", "Student")
                        .WithMany("StudyTimes")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Subject", "Subject")
                        .WithMany("StudyTimes")
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.CustomInfoOfSubject", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Subject", "Subject")
                        .WithMany("CustomInfoOfSubjects")
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Document", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "Censor")
                        .WithMany("CensorDocument")
                        .HasForeignKey("censorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.AboutSubject.Lesson", "Lesson")
                        .WithMany("Documents")
                        .HasForeignKey("lessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "TeacherCreated")
                        .WithMany("TeacherCreateDocument")
                        .HasForeignKey("teacherCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Censor");

                    b.Navigation("Lesson");

                    b.Navigation("TeacherCreated");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.DocumentAccess", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Class", "Class")
                        .WithMany("DocumentAccess")
                        .HasForeignKey("classId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.AboutSubject.Document", "Document")
                        .WithMany("DocumentAccess")
                        .HasForeignKey("documentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Lesson", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "Censor")
                        .WithMany("CensorLesson")
                        .HasForeignKey("censorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.AboutSubject.Part", "Part")
                        .WithMany("Lessons")
                        .HasForeignKey("partId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "TeacherCreated")
                        .WithMany("TeacherCreatedLesson")
                        .HasForeignKey("teacherCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Censor");

                    b.Navigation("Part");

                    b.Navigation("TeacherCreated");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.LessonAccess", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Class", "Class")
                        .WithMany("LessonAccess")
                        .HasForeignKey("classId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.AboutSubject.Lesson", "Lesson")
                        .WithMany("LessonAccess")
                        .HasForeignKey("lessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.LessonAnswer", b =>
                {
                    b.HasOne("LMS_Library_API.Models.AboutSubject.LessonQuestion", "LessonQuestion")
                        .WithMany("LessonAnswers")
                        .HasForeignKey("lessonQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Student", "Student")
                        .WithMany("LessonAnswers")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("LessonAnswers")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonQuestion");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.LessonQuestion", b =>
                {
                    b.HasOne("LMS_Library_API.Models.AboutSubject.Lesson", "Lesson")
                        .WithMany("LessonQuestions")
                        .HasForeignKey("lessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Student", "Student")
                        .WithMany("LessonQuestion")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("LessonQuestions")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.NotificationClassStudent", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Class", "Class")
                        .WithMany("NotificationClassStudents")
                        .HasForeignKey("classId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Student", "Student")
                        .WithMany("NotificationClassStudents")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.AboutSubject.SubjectNotification", "SubjectNotification")
                        .WithMany("NotificationClassStudents")
                        .HasForeignKey("subjectNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");

                    b.Navigation("SubjectNotification");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Part", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "Censor")
                        .WithMany("CensorPart")
                        .HasForeignKey("censorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Subject", "Subject")
                        .WithMany("Parts")
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "TeacherCreated")
                        .WithMany("TeacherCreatedPart")
                        .HasForeignKey("teacherCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Censor");

                    b.Navigation("Subject");

                    b.Navigation("TeacherCreated");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.SubjectNotification", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Subject", "Subject")
                        .WithMany("SubjectNotifications")
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("SubjectNotifications")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.ExamRecentViews", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Exams.Exam", "Exam")
                        .WithMany("ExamRecentViews")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("ExamRecentViews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.Help", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("Helps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.PrivateFile", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("PrivateFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.QnALikes", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithOne("QnALikes")
                        .HasForeignKey("LMS_Library_API.Models.AboutUser.QnALikes", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.TeacherClass", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Class", "Class")
                        .WithMany("TeacherClasses")
                        .HasForeignKey("classId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "Teacher")
                        .WithMany("TeacherClasses")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.Exam", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "Censor")
                        .WithMany("Censor")
                        .HasForeignKey("CensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "TeacherCreated")
                        .WithMany("TeacherCreated")
                        .HasForeignKey("TeacherCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Censor");

                    b.Navigation("Subject");

                    b.Navigation("TeacherCreated");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QB_Answer_Essay", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Exams.QuestionBanks", "QuestionBanks")
                        .WithOne("QB_Answer_Essay")
                        .HasForeignKey("LMS_Library_API.Models.Exams.QB_Answer_Essay", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBanks");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QB_Answer_MC", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Exams.QuestionBanks", "QuestionBanks")
                        .WithMany("QB_Answers_MC")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBanks");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.Question_Exam", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Exams.Exam", "Exam")
                        .WithMany("Question_Exam")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Exams.QuestionBanks", "QuestionBanks")
                        .WithMany("Question_Exam")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("QuestionBanks");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QuestionBanks", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Subject", "Subject")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("TeacherCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Notification.Notification", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "Recipient")
                        .WithMany("Recipients")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "Sender")
                        .WithMany("Senders")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Notification.NotificationSetting", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Notification.NotificationFeatures", "NotificationFeatures")
                        .WithMany("NotificationSetting")
                        .HasForeignKey("FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("NotificationSetting")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationFeatures");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.RoleAccess.Role_Permissions", b =>
                {
                    b.HasOne("LMS_Library_API.Models.RoleAccess.Permissions", "Permissions")
                        .WithMany("Role_Permissions")
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.RoleAccess.Role", "Role")
                        .WithMany("Role_Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Student", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("classId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("LMS_Library_API.Models.StudentNotification.StudentNotification", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Student", "Student")
                        .WithMany("StudentNotifications")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LMS_Library_API.Models.StudentNotification.StudentNotificationSetting", b =>
                {
                    b.HasOne("LMS_Library_API.Models.StudentNotification.StudentNotificationFeatures", "StudentNotificationFeatures")
                        .WithMany("StudentNotificationSetting")
                        .HasForeignKey("StudentNotificationFeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Student", "Student")
                        .WithMany("StudentNotificationSetting")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("StudentNotificationFeatures");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Subject", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithOne("Subject")
                        .HasForeignKey("LMS_Library_API.Models.Subject", "TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.SystemInfomation", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithOne("SystemInfomation")
                        .HasForeignKey("LMS_Library_API.Models.SystemInfomation", "Principals")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.User", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.RoleAccess.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Document", b =>
                {
                    b.Navigation("DocumentAccess");

                    b.Navigation("StudyHistories");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Lesson", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("LessonAccess");

                    b.Navigation("LessonQuestions");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.LessonQuestion", b =>
                {
                    b.Navigation("LessonAnswers");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Part", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.SubjectNotification", b =>
                {
                    b.Navigation("NotificationClassStudents");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Class", b =>
                {
                    b.Navigation("ClassSubjects");

                    b.Navigation("DocumentAccess");

                    b.Navigation("LessonAccess");

                    b.Navigation("NotificationClassStudents");

                    b.Navigation("Students");

                    b.Navigation("TeacherClasses");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Department", b =>
                {
                    b.Navigation("Subjects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.Exam", b =>
                {
                    b.Navigation("ExamRecentViews");

                    b.Navigation("Question_Exam");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QuestionBanks", b =>
                {
                    b.Navigation("QB_Answer_Essay")
                        .IsRequired();

                    b.Navigation("QB_Answers_MC");

                    b.Navigation("Question_Exam");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Notification.NotificationFeatures", b =>
                {
                    b.Navigation("NotificationSetting");
                });

            modelBuilder.Entity("LMS_Library_API.Models.RoleAccess.Permissions", b =>
                {
                    b.Navigation("Role_Permissions");
                });

            modelBuilder.Entity("LMS_Library_API.Models.RoleAccess.Role", b =>
                {
                    b.Navigation("Role_Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Student", b =>
                {
                    b.Navigation("LessonAnswers");

                    b.Navigation("LessonQuestion");

                    b.Navigation("NotificationClassStudents");

                    b.Navigation("StudentNotificationSetting");

                    b.Navigation("StudentNotifications");

                    b.Navigation("StudentQnALikes")
                        .IsRequired();

                    b.Navigation("StudentSubjects");

                    b.Navigation("StudyHistories");

                    b.Navigation("StudyTimes");
                });

            modelBuilder.Entity("LMS_Library_API.Models.StudentNotification.StudentNotificationFeatures", b =>
                {
                    b.Navigation("StudentNotificationSetting");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Subject", b =>
                {
                    b.Navigation("ClassSubjects");

                    b.Navigation("CustomInfoOfSubjects");

                    b.Navigation("Exams");

                    b.Navigation("Parts");

                    b.Navigation("QuestionBanks");

                    b.Navigation("StudentSubjects");

                    b.Navigation("StudyTimes");

                    b.Navigation("SubjectNotifications");
                });

            modelBuilder.Entity("LMS_Library_API.Models.User", b =>
                {
                    b.Navigation("Censor");

                    b.Navigation("CensorDocument");

                    b.Navigation("CensorLesson");

                    b.Navigation("CensorPart");

                    b.Navigation("ExamRecentViews");

                    b.Navigation("Helps");

                    b.Navigation("LessonAnswers");

                    b.Navigation("LessonQuestions");

                    b.Navigation("NotificationSetting");

                    b.Navigation("PrivateFiles");

                    b.Navigation("QnALikes")
                        .IsRequired();

                    b.Navigation("QuestionBanks");

                    b.Navigation("Recipients");

                    b.Navigation("Senders");

                    b.Navigation("Subject")
                        .IsRequired();

                    b.Navigation("SubjectNotifications");

                    b.Navigation("SystemInfomation")
                        .IsRequired();

                    b.Navigation("TeacherClasses");

                    b.Navigation("TeacherCreateDocument");

                    b.Navigation("TeacherCreated");

                    b.Navigation("TeacherCreatedLesson");

                    b.Navigation("TeacherCreatedPart");
                });
#pragma warning restore 612, 618
        }
    }
}
